name: Tests and Code Quality

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Debug Python version
      run: echo "Setting up Python ${{ matrix.python-version }}"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run tests with coverage
      env:
        TESTING: "1"
        MQTT_PASSWORD: "test-password"
        SERIAL_NUMBER: "test-serial"
        DEVICE_IP: "192.168.1.100"
        ROOT_TOPIC: "test-topic"
      run: |
        python -m pytest tests/ --cov=dyson2mqtt --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy

    - name: Run linting checks
      env:
        TESTING: "1"
        MQTT_PASSWORD: "test-password"
        SERIAL_NUMBER: "test-serial"
        DEVICE_IP: "192.168.1.100"
        ROOT_TOPIC: "test-topic"
      run: |
        # Check code formatting with black
        black --check --diff dyson2mqtt/ tests/

        # Check import sorting with isort
        isort --check-only --diff dyson2mqtt/ tests/

        # Check code style with flake8
        flake8 dyson2mqtt/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run type checking with mypy
      env:
        TESTING: "1"
        MQTT_PASSWORD: "test-password"
        SERIAL_NUMBER: "test-serial"
        DEVICE_IP: "192.168.1.100"
        ROOT_TOPIC: "test-topic"
      run: |
        mypy dyson2mqtt/ --ignore-missing-imports --no-strict-optional

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run security checks
      env:
        TESTING: "1"
        MQTT_PASSWORD: "test-password"
        SERIAL_NUMBER: "test-serial"
        DEVICE_IP: "192.168.1.100"
        ROOT_TOPIC: "test-topic"
      run: |
        # Check for common security issues
        bandit -r dyson2mqtt/ -f json -o bandit-report.json || true

        # Check for known vulnerabilities in dependencies
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
